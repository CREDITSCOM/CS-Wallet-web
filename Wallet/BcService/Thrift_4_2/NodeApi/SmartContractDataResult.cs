/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NodeApi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SmartContractDataResult : TBase
  {
    private APIResponse _status;
    private List<SmartContractMethod> _methods;
    private Dictionary<string, Variant> _variables;

    public APIResponse Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public List<SmartContractMethod> Methods
    {
      get
      {
        return _methods;
      }
      set
      {
        __isset.methods = true;
        this._methods = value;
      }
    }

    public Dictionary<string, Variant> Variables
    {
      get
      {
        return _variables;
      }
      set
      {
        __isset.variables = true;
        this._variables = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool status;
      public bool methods;
      public bool variables;
    }

    public SmartContractDataResult() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Status = new APIResponse();
                Status.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Methods = new List<SmartContractMethod>();
                  TList _list62 = iprot.ReadListBegin();
                  for( int _i63 = 0; _i63 < _list62.Count; ++_i63)
                  {
                    SmartContractMethod _elem64;
                    _elem64 = new SmartContractMethod();
                    _elem64.Read(iprot);
                    Methods.Add(_elem64);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  Variables = new Dictionary<string, Variant>();
                  TMap _map65 = iprot.ReadMapBegin();
                  for( int _i66 = 0; _i66 < _map65.Count; ++_i66)
                  {
                    string _key67;
                    Variant _val68;
                    _key67 = iprot.ReadString();
                    _val68 = new Variant();
                    _val68.Read(iprot);
                    Variables[_key67] = _val68;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SmartContractDataResult");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Status != null && __isset.status) {
          field.Name = "status";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Status.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Methods != null && __isset.methods) {
          field.Name = "methods";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Methods.Count));
            foreach (SmartContractMethod _iter69 in Methods)
            {
              _iter69.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Variables != null && __isset.variables) {
          field.Name = "variables";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Variables.Count));
            foreach (string _iter70 in Variables.Keys)
            {
              oprot.WriteString(_iter70);
              Variables[_iter70].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SmartContractDataResult(");
      bool __first = true;
      if (Status != null && __isset.status) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Status: ");
        __sb.Append(Status== null ? "<null>" : Status.ToString());
      }
      if (Methods != null && __isset.methods) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Methods: ");
        __sb.Append(Methods);
      }
      if (Variables != null && __isset.variables) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Variables: ");
        __sb.Append(Variables);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
